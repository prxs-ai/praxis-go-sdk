package a2a

import (
	"time"
)

// Task represents the fundamental unit of work managed by A2A
type Task struct {
	ID        string      `json:"id"`
	ContextID string      `json:"contextId"`
	Status    TaskStatus  `json:"status"`
	History   []Message   `json:"history,omitempty"`
	Artifacts []Artifact  `json:"artifacts,omitempty"`
	Metadata  interface{} `json:"metadata,omitempty"`
	Kind      string      `json:"kind"` // always "task"
}

// TaskStatus represents the current state of a task
type TaskStatus struct {
	State     string   `json:"state"` // "submitted", "working", "completed", "failed", "input-required", "canceled", "rejected", "auth-required"
	Message   *Message `json:"message,omitempty"`
	Timestamp string   `json:"timestamp,omitempty"`
}

// Message represents a communication turn between a client and agent
type Message struct {
	Role      string `json:"role"` // "user" or "agent"
	Parts     []Part `json:"parts"`
	MessageID string `json:"messageId"`
	TaskID    string `json:"taskId,omitempty"`
	ContextID string `json:"contextId,omitempty"`
	Kind      string `json:"kind"` // always "message"
}

// Part is the smallest unit of content within a Message or Artifact
type Part struct {
	Kind string      `json:"kind"` // "text", "file", "data"
	Text string      `json:"text,omitempty"`
	File *File       `json:"file,omitempty"`
	Data interface{} `json:"data,omitempty"`
}

// File represents a file attachment
type File struct {
	Name     string `json:"name,omitempty"`
	MimeType string `json:"mimeType,omitempty"`
	Bytes    string `json:"bytes,omitempty"` // base64 encoded
	URI      string `json:"uri,omitempty"`
}

// Artifact represents an output generated by the agent as a result of a task
type Artifact struct {
	ArtifactID  string      `json:"artifactId"`
	Name        string      `json:"name,omitempty"`
	Description string      `json:"description,omitempty"`
	Parts       []Part      `json:"parts"`
	Metadata    interface{} `json:"metadata,omitempty"`
}

// JSONRPCRequest represents a JSON-RPC 2.0 request
type JSONRPCRequest struct {
	JSONRPC string      `json:"jsonrpc"` // always "2.0"
	ID      interface{} `json:"id"`
	Method  string      `json:"method"`
	Params  interface{} `json:"params,omitempty"`
}

// JSONRPCResponse represents a JSON-RPC 2.0 response
type JSONRPCResponse struct {
	JSONRPC string      `json:"jsonrpc"` // always "2.0"
	ID      interface{} `json:"id"`
	Result  interface{} `json:"result,omitempty"`
	Error   *RPCError   `json:"error,omitempty"`
}

// RPCError represents a JSON-RPC error
type RPCError struct {
	Code    int         `json:"code"`
	Message string      `json:"message"`
	Data    interface{} `json:"data,omitempty"`
}

// Error implements the error interface
func (e *RPCError) Error() string {
	return e.Message
}

// A2A JSON-RPC Error Codes
const (
	ErrorCodeTaskNotFound      = -32001
	ErrorCodeTaskNotCancelable = -32002
	ErrorCodeInvalidParams     = -32602
	ErrorCodeMethodNotFound    = -32601
	ErrorCodeInternalError     = -32603
	ErrorCodeParseError        = -32700
)

// MessageSendParams represents parameters for message/send method
type MessageSendParams struct {
	Message Message `json:"message"`
}

// TasksGetParams represents parameters for tasks/get method
type TasksGetParams struct {
	ID string `json:"id"`
}

// TasksCancelParams represents parameters for tasks/cancel method
type TasksCancelParams struct {
	ID string `json:"id"`
}

// A2A Agent Card extensions (full specification)
type A2AAgentCard struct {
	Name               string                 `json:"name"`
	Version            string                 `json:"version"`
	ProtocolVersion    string                 `json:"protocolVersion"`
	URL                string                 `json:"url"`
	Description        string                 `json:"description"`
	Skills             []A2ASkill             `json:"skills"`
	Capabilities       A2ACapabilities        `json:"capabilities"`
	SecuritySchemes    map[string]interface{} `json:"securitySchemes,omitempty"`
	SupportedTransports []string              `json:"supportedTransports"`
	Provider           *A2AProvider           `json:"provider,omitempty"`
	Metadata           interface{}            `json:"metadata,omitempty"`
}

// A2ASkill represents an agent skill
type A2ASkill struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Description string   `json:"description"`
	Tags        []string `json:"tags,omitempty"`
}

// A2ACapabilities represents agent capabilities
type A2ACapabilities struct {
	Streaming         *bool `json:"streaming,omitempty"`
	PushNotifications *bool `json:"pushNotifications,omitempty"`
	StateTransition   *bool `json:"stateTransition,omitempty"`
}

// A2AProvider represents agent provider information
type A2AProvider struct {
	Name        string `json:"name"`
	Version     string `json:"version,omitempty"`
	Description string `json:"description,omitempty"`
	URL         string `json:"url,omitempty"`
}

// Helper functions for creating common A2A objects

// NewTask creates a new task with default values
func NewTask(id, contextID string) *Task {
	return &Task{
		ID:        id,
		ContextID: contextID,
		Status: TaskStatus{
			State:     "submitted",
			Timestamp: time.Now().UTC().Format(time.RFC3339),
		},
		History:   []Message{},
		Artifacts: []Artifact{},
		Kind:      "task",
	}
}

// NewMessage creates a new message
func NewMessage(role, messageID string, parts []Part) *Message {
	return &Message{
		Role:      role,
		Parts:     parts,
		MessageID: messageID,
		Kind:      "message",
	}
}

// NewTextPart creates a text part
func NewTextPart(text string) Part {
	return Part{
		Kind: "text",
		Text: text,
	}
}

// NewDataPart creates a data part
func NewDataPart(data interface{}) Part {
	return Part{
		Kind: "data",
		Data: data,
	}
}

// NewArtifact creates a new artifact
func NewArtifact(id, name string, parts []Part) *Artifact {
	return &Artifact{
		ArtifactID: id,
		Name:       name,
		Parts:      parts,
	}
}

// NewRPCError creates a new RPC error
func NewRPCError(code int, message string) *RPCError {
	return &RPCError{
		Code:    code,
		Message: message,
	}
}

// NewJSONRPCResponse creates a successful JSON-RPC response
func NewJSONRPCResponse(id interface{}, result interface{}) JSONRPCResponse {
	return JSONRPCResponse{
		JSONRPC: "2.0",
		ID:      id,
		Result:  result,
	}
}

// NewJSONRPCErrorResponse creates an error JSON-RPC response
func NewJSONRPCErrorResponse(id interface{}, err *RPCError) JSONRPCResponse {
	return JSONRPCResponse{
		JSONRPC: "2.0",
		ID:      id,
		Error:   err,
	}
}

// Error variables for common A2A errors
var (
	ErrTaskNotFound      = NewRPCError(ErrorCodeTaskNotFound, "Task not found")
	ErrTaskNotCancelable = NewRPCError(ErrorCodeTaskNotCancelable, "Task is not in a cancelable state")
)